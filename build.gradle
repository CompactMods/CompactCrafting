buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        jcenter()
        mavenCentral()
    }

    dependencies {
        classpath "net.minecraftforge.gradle:ForgeGradle:4.1.12"
    }
}

plugins {
    id "idea"
    id "eclipse"
    id "maven-publish"
}

apply plugin: "net.minecraftforge.gradle"

def gitCommitHash = 'git rev-parse --verify --short HEAD'.execute().text.trim()
def isRelease = (System.getenv("CM_RELEASE") ?: "false").equalsIgnoreCase("true")

version = isRelease ? mod_version : "nightly-${gitCommitHash}"
group = "com.robotgryphon"
archivesBaseName = mod_id

println("Mod ID: ${mod_id}");
println("Version: ${version}");

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

sourceSets {
    api {
        java {
            srcDir 'src/api/java'
        }

        compileClasspath += configurations.getByName("minecraft")
    }

    main {
        java {
            srcDir "src/main/java"
        }

        resources {
            srcDir 'src/generated/resources'
        }

        compileClasspath += sourceSets.api.output
    }

    test {
        compileClasspath += sourceSets.api.output
        compileClasspath += sourceSets.main.output
    }
}

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'official', version: minecraft_version
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    def resourcesDir = sourceSets.main.resources.srcDirs.first().absolutePath
    accessTransformer = file("$resourcesDir/META-INF/accesstransformer.cfg")

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run/client')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', '' // 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                compactcrafting {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run/server')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', '' // ''SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                compactcrafting {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', '' // 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'compactcrafting'
            args '--all'
            args '--output', file('src/generated/resources/')
            args "--existing", file("src/main/resources")

            mods {
                compactcrafting {
                    source sourceSets.main
                }
            }
        }

        unitTests {
            parent runs.server // This run config inherits settings from the server config
            workingDirectory project.file('run/test')
            main 'com.alcatrazescapee.mcjunitlib.DedicatedTestServerLauncher' // The main class which launches a customized server which then runs JUnit tests
            ideaModule "${project.name}.test" // Tell IDEA to use the classpath of the test module
            property 'forge.logging.console.level', 'unittest' // This logging level prevents any other server information messages and leaves only the unit test output
            environment 'MOD_CLASSES', String.join(File.pathSeparator,
                    "${mod_id}%%${sourceSets.main.output.resourcesDir}",
                    "${mod_id}%%${sourceSets.main.output.classesDirs[0]}",
                    "${mod_id}%%${sourceSets.test.output.resourcesDir}",
                    "${mod_id}%%${sourceSets.test.output.classesDirs[0]}",
            ) // Forge will ignore all test sources unless we explicitly tell it to include them as mod sources
            environment 'target', 'fmltestserver' // This is a custom service used to launch with ModLauncher's transforming class loader
            mods {
                examplemod { // The mod that is being tested - Replace this with your mod ID!
                    sources sourceSets.main
                }
            }
        }
    }
}

def format(String jar_name) {
    def index = jar_name.lastIndexOf('-')
    index = jar_name.substring(0, index).lastIndexOf('-')
    def mod_version = jar_name.substring(index).replace(".jar", "")
    if (mod_version.startsWith('-')) {
        mod_version = mod_version.substring(1);
    }
    def mod_name = jar_name.substring(0, index)
    return mod_name + ":" + mod_name + ":" + mod_version
}

def dev_mods_dir = "mods"

repositories {
    flatDir {
        dirs dev_mods_dir
    }

    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }

    // location of the maven that hosts JEI files
    maven {
        name "Progwml Repo"
        url "http://dvs1.progwml6.com/files/maven"
    }

    // TheOneProbe
    maven {
        name 'tterrag maven'
        url "http://maven.tterrag.com/"
    }

    maven {
        name 'MCUnitTests'
        url 'https://jitpack.io'
    }
}

def dev_mods = fileTree(dev_mods_dir).filter { it -> it.isFile() }.files.name.collect( { format(it) } )

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    testImplementation fg.deobf("com.github.alcatrazEscapee:mcjunitlib:1.3.3-${minecraft_version}")

    // Deobfuscate each dev mod for runtime
    dev_mods.each {
        compileOnly fg.deobf(it)
        runtimeOnly fg.deobf(it)
    }

    // JEI
    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}:api")
    runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}")

    // The One Probe
    compileOnly fg.deobf("mcjty.theoneprobe:TheOneProbe-1.16:${top_version}:api")
    runtimeOnly fg.deobf("mcjty.theoneprobe:TheOneProbe-1.16:${top_version}")
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    destinationDir = file("$rootDir/build-out")
    finalizedBy('reobfJar')
    manifest {
        attributes([
            "Specification-Title": "compactcrafting",
            "Specification-Vendor": "robotgryphon",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version":  isRelease ? archiveVersion : "nightly-${gitCommitHash}",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

task apiJar(type: Jar) {
    // Sources included because of MinecraftForge/ForgeGradle#369
    from(sourceSets.api.output)
    archiveClassifier = 'api'
    destinationDirectory = file("$rootDir/build-out")
}

artifacts {
    archives jar, apiJar
}

publishing {
    publications {
        maven(MavenPublication) {
            artifactId = mod_id
            artifacts {
                artifact jar
                artifact(apiJar) {
                    classifier = "api"
                }
            }
        }

        nightlyMaven(MavenPublication) {
            artifactId = mod_id
            artifacts {
                artifact(jar) {
                    group = "dev.compactmods.nightly"
                }
                artifact(apiJar) {
                    classifier = "api"
                }
            }
        }
    }

    repositories {
        // GitHub Packages
        maven {
            name = "GitHubPackages"
            url = "https://maven.pkg.github.com/CompactMods/CompactCrafting"
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}

test {
    useJUnitPlatform() {
        excludeTags "minecraft"
    }
}
