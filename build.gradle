buildscript {
    repositories {
        mavenLocal {
            content {
                includeGroup 'net.minecraftforge.gradle'
            }
        }
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.1.+', changing: true
    }
}

plugins {
    id "idea"
}

apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'maven-publish'

version = mod_version
group = "com.robotgryphon"
archivesBaseName = mod_id

java.toolchain.languageVersion = JavaLanguageVersion.of(8) // Mojang ships Java 8 to end users, so your mod should target Java 8.

sourceSets {
    main {
        resources {
            srcDir 'src/generated/resources'
        }
    }
    test
}

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // Channel:   Version:
    // snapshot   YYYYMMDD   Snapshot are built nightly.
    // stable     #          Stables are built at the discretion of the MCP team.
    // official   MCVersion  Official field/method names from Mojang mapping files
    //
    // You must be aware of the Mojang license when using the 'official' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: "${mappings_channel}", version: "${mappings_version}"

    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be changed as needed.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            if (project.hasProperty('mc_uuid')) {
                args '--uuid', project.getProperty('mc_uuid')
            }
            if (project.hasProperty('mc_username')) {
                args '--username', project.getProperty('mc_username')
            }
            if (project.hasProperty('mc_accessToken')) {
                args '--accessToken', project.getProperty('mc_accessToken')
            }

            mods {
                compactcrafting {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be changed as needed.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            mods {
                compactcrafting {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be changed as needed.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'compactcrafting', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                compactcrafting {
                    source sourceSets.main
                }
            }
        }

        unitTests {
            parent runs.server // This run config inherits settings from the server config
            workingDirectory project.file('run/server')
            main 'com.alcatrazescapee.mcjunitlib.DedicatedTestServerLauncher' // The main class which launches a customized server which then runs JUnit tests
            ideaModule "${project.name}.test" // Tell IDEA to use the classpath of the test module
            property 'forge.logging.console.level', 'unittest' // This logging level prevents any other server information messages and leaves only the unit test output
            environment 'MOD_CLASSES', String.join(File.pathSeparator,
                    "${mod_id}%%${sourceSets.main.output.resourcesDir}",
                    "${mod_id}%%${sourceSets.main.output.classesDirs}",
                    "${mod_id}%%${sourceSets.test.output.resourcesDir}",
                    "${mod_id}%%${sourceSets.test.output.classesDirs}",
            ) // Forge will ignore all test sources unless we explicitly tell it to include them as mod sources
            environment 'target', 'fmltestserver' // This is a custom service used to launch with ModLauncher's transforming class loader
            mods {
                compactcrafting { // The mod that is being tested - Replace this with your mod ID!
                    sources sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

def format(String jar_name) {
    def index = jar_name.lastIndexOf('-')
    index = jar_name.substring(0, index).lastIndexOf('-')
    def mod_version = jar_name.substring(index).replace(".jar", "")
    if (mod_version.startsWith('-')) {
        mod_version = mod_version.substring(1);
    }
    def mod_name = jar_name.substring(0, index)
    return mod_name + ":" + mod_name + ":" + mod_version
}

def dev_mods_dir = "mods"

repositories {
    maven {
        name 'Minecraft maven'
        url = 'https://libraries.minecraft.net/'
    }

    flatDir {
        dirs dev_mods_dir
    }

    // location of the maven that hosts JEI files
    maven {
        name "Progwml Repo"
        url "https://dvs1.progwml6.com/files/maven"
    }

    // TheOneProbe
    maven {
        name 'tterrag maven'
        url "https://maven.tterrag.com/"
    }

    maven {
        name 'MCUnitTests'
        url 'https://jitpack.io'
    }
}

def dev_mods = fileTree(dev_mods_dir).filter { it -> it.isFile() }.files.name.collect( { format(it) } )

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    testImplementation fg.deobf("com.github.alcatrazEscapee:mcjunitlib:1.3.3-${minecraft_version}")

    // Deobfuscate each dev mod for runtime
    dev_mods.each {
        compileOnly fg.deobf(it)
        runtimeOnly fg.deobf(it)
    }

    // JEI
    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}:api")
    runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}")

    // The One Probe
    compileOnly fg.deobf("mcjty.theoneprobe:TheOneProbe-1.16:${top_version}:api")
    runtimeOnly fg.deobf("mcjty.theoneprobe:TheOneProbe-1.16:${top_version}")
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    destinationDir = file("$rootDir/build-out")
    finalizedBy('reobfJar')
    manifest {
        attributes([
            "Specification-Title": "compactcrafting",
            "Specification-Vendor": "robotgryphon",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": project.version,
            "Implementation-Vendor": "robotgryphon",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

artifacts {
    archives jar
}

publishing {
    publications {
        maven(MavenPublication) {
            artifactId = mod_id
            artifacts {
                artifact jar
            }
        }
    }

    repositories {
        // GitHub Packages
        maven {
            name = "GitHubPackages"
            url = "https://maven.pkg.github.com/CompactMods/CompactCrafting"
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}

test {
    useJUnitPlatform()
    filter {
        exclude "com/robotgryphon/compactcrafting/tests/minecraft/**"
    }
}
