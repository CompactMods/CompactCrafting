buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
        mavenLocal()
    }

    dependencies {
        classpath "net.minecraftforge.gradle:ForgeGradle:5.1.+"
    }
}

plugins {
    id "idea"
    id "eclipse"
    id "maven-publish"
    id 'com.github.johnrengelman.shadow' version '7.1.0'
}

apply plugin: "net.minecraftforge.gradle"

def semver = System.getenv("CC_SEMVER_VERSION")
def buildNumber = System.getenv("CC_BUILD_NUM")
def nightlyVersion = "${semver}.${buildNumber}"
def isRelease = (System.getenv("CC_RELEASE") ?: "false").equalsIgnoreCase("true")
def modVersion = isRelease ? semver : nightlyVersion

tasks.create("getBuildInfo") {
    doFirst {
        this.logger.info("Mod ID: ${mod_id}")
        this.logger.info("Version: ${modVersion}")
        this.logger.info("Semver Version: ${semver}")
        this.logger.info("Nightly Build: ${nightlyVersion}")
    }
}

version = modVersion
group = "dev.compactmods"
archivesBaseName = mod_id

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

configurations {
    library
    implementation.extendsFrom library
    shade.extendsFrom library
}

sourceSets {
    api {
        java {
            srcDir 'src/api/java'
        }

        compileClasspath += configurations.getByName("minecraft")
    }

    main {
        java {
            srcDir "src/main/java"
        }

        resources {
            srcDir "src/main/resources"
            srcDir 'src/generated/resources'
        }

        runtimeClasspath += sourceSets.api.output
        compileClasspath += sourceSets.api.output
    }

    test {
        java { srcDir "src/test/java" }

        resources {
            srcDir "src/test/resources"
        }

        runtimeClasspath += sourceSets.api.output
        compileClasspath += sourceSets.api.output
        runtimeClasspath += sourceSets.main.output
        compileClasspath += sourceSets.main.output
    }
}

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

minecraft.runs.all {
    lazyToken('minecraft_classpath') {
        configurations.library.copyRecursive().resolve().collect { it.absolutePath }.join(File.pathSeparator)
    }
}

minecraft {
    mappings channel: 'official', version: minecraft_version
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    def resourcesDir = sourceSets.main.resources.srcDirs.first().absolutePath
    accessTransformer = file("$resourcesDir/META-INF/accesstransformer.cfg")

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run/client')

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', '' // 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                compactcrafting {
                    source sourceSets.main
                    source sourceSets.api
                }
            }
        }

        server {
            workingDirectory project.file('run/server')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', '' // ''SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

            environment "CC_TEST_RESOURCES", sourceSets.test.resources.srcDirs[0]

            mods {
                compactcrafting {
                    source sourceSets.main
                    source sourceSets.api
                    source sourceSets.test
                }
            }
        }

        data {
            workingDirectory project.file('run/data')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', '' // 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'compactcrafting'
            args '--all'
            args '--output', file('src/generated/resources/')
            args "--existing", file("src/main/resources")

            forceExit(false)
            
            mods {
                compactcrafting {
                    source sourceSets.main
                    source sourceSets.api
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run/test')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

            environment "CC_TEST_RESOURCES", sourceSets.test.resources.srcDirs[0]

            forceExit(false)

            mods {
                compactcrafting {
                    source sourceSets.api
                    source sourceSets.main
                    source sourceSets.test
                }
            }
        }
    }
}

repositories {
    mavenLocal()

    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }

    // location of the maven that hosts JEI files
    maven {
        name "Progwml Repo"
        url "https://dvs1.progwml6.com/files/maven"
    }

    // TheOneProbe
    maven {
        name 'tterrag maven'
        url "https://maven.tterrag.com/"
    }

    maven {
        name "MCJUnitLib - CM Github"
        url = "https://maven.pkg.github.com/CompactMods/mcjunitlib"
        content {
            includeGroup "com.github.alcatrazEscapee"
        }

        credentials {
            username = project.findProperty("gpr.actor") ?: System.getenv("GITHUB_ACTOR")
            password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
        }
    }
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    library "io.reactivex.rxjava3:rxjava:3.1.1";

    // Nicephore - Screenshots and Stuff
    runtimeOnly(fg.deobf("curse.maven:nicephore-401014:3574658"))

    // Shut up Experimental Settings - so we don't have to deal with that CONSTANTLY
    runtimeOnly(fg.deobf("curse.maven:shutupexperimental-407174:3544525"))

    // JEI
    compileOnly fg.deobf("mezz.jei:jei-${jei_mc_version}:${jei_version}:api")
    runtimeOnly fg.deobf("mezz.jei:jei-${jei_mc_version}:${jei_version}")

    // The One Probe
    implementation(fg.deobf("curse.maven:theoneprobe-245211:3550084"))
}

processResources {
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
}

processTestResources {
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
}

assemble {
    dependsOn shadowJar
}

reobf {
    shadowJar {}
}

tasks.withType(Jar).configureEach {
    destinationDir = file("$rootDir/build-out")
}

shadowJar {
    classifier ""
    from sourceSets.api.output
    from sourceSets.main.output

    configurations = [project.configurations.shade]
    exclude "LICENSE*"
    finalizedBy 'reobfShadowJar'
    minimize()
    relocate 'io.reactivex', 'dev.compactmods.crafting.lib.reactivex'
    relocate 'org.reactivestreams', 'dev.compactmods.crafting.lib.reactivestreams'
}

jar {
    classifier "slim"

    from sourceSets.api.output
    from sourceSets.main.output

    finalizedBy('reobfJar')

    manifest {
        attributes([
                "Specification-Title"     : "Compact Crafting",
                "Specification-Vendor"    : "compactmods",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : archiveVersion,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

task apiJar(type: Jar) {
    // Sources included because of MinecraftForge/ForgeGradle#369
    from sourceSets.api.output
    classifier("api")
}

//task testJar(type: Jar) {
//    from sourceSets.api.output
//    from sourceSets.main.output
//    from sourceSets.test.output
//    classifier("tests")
//}

// Allow higher number of errors.
gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xmaxerrs" << "9999"
    }
}

artifacts {
    archives jar, shadowJar, apiJar //, testJar
}

def PACKAGES_URL = System.getenv("GH_PKG_URL") ?: "https://maven.pkg.github.com/compactmods/compactcrafting"
publishing {
    publications {
        maven(MavenPublication) {
            artifactId = mod_id
            artifacts {
                artifact(jar)
                artifact(shadowJar)
                artifact(apiJar)
                //artifact(testJar)
            }
        }
    }

    repositories {
        // GitHub Packages
        maven {
            name = "GitHubPackages"
            url = PACKAGES_URL
            credentials {
                username = project.findProperty("gpr.actor") ?: System.getenv("GITHUB_ACTOR")
                password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
            }
        }
    }
}